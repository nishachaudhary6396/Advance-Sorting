Merge Sort -->

package Advance_Sorting;
import java.util.*;
public class MergeSortAlgo {
    public static void print(int arr[]){
        for(int ele : arr){
            System.out.print(ele+" ");
        }
        System.out.println();
    }
    public static void merge(int[] a , int[] b , int[] arr){
        int i = 0 , j=0,k=0;
        while(i<a.length && j<b.length){
            if(a[i]<b[j]){
                arr[k] = a[i];
                i++;
            }
            else{
                arr[k]=b[j];
                j++;
            }
            k++;
        }
        while(j<b.length) {
            arr[k] = b[j];
            j++;
            k++;
        }
        while(i<a.length){
                arr[k] = a[i];
                i++;
                k++;
            }
        }
    public static void mergeSort(int[] arr){
        int n = arr.length;
        if(n==1) return ;
        int[] a = new int[n/2];
        int[] b = new int[n-n/2];
        for(int i=0;i<n/2;i++){
            a[i] = arr[i];
        }
        for(int i=0;i<n-n/2;i++){
            b[i] = arr[i+n/2];
        }
        // magic
        mergeSort(a);
        mergeSort(b);

        merge(a,b,arr);
    }
    public static void main(String[] args) {
        int arr[] = {80,10,70,60,40,50,20};
        print(arr);
        mergeSort(arr);
        print(arr);
    }
}


Quick Sort -->

public class QuickSortAlgo {
    public static void print(int[] arr){
        for(int ele : arr){
            System.out.print(ele+" ");
        }
        System.out.println();
    }
    public static void swap(int[] arr , int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    public static int partition(int[] arr,int lo,int hi){
        int pivot = arr[lo] , pIdx = lo;
        int countShort = 0;
        for(int i= lo+1;i<=hi;i++){
            if(arr[i]<=pivot){
                countShort++;
            }
        }
        int correctIndex = countShort + pIdx;
        // swap
       swap(arr,lo,correctIndex);
       // partition
        int i=lo, j = hi;
        while(i< correctIndex && j >correctIndex){
            if(arr[i]<pivot) i++;
            else if(arr[j]>pivot) j--;
            else if(arr[i]>pivot && arr[j]<pivot){
                swap(arr , i , j);
            }
        }
        return correctIndex;
    }
    public static void quickSort(int[] arr, int lo , int hi){
        if(lo>=hi) return;
      int idx = partition(arr,lo,hi);
      quickSort(arr,lo,idx-1);
      quickSort(arr,idx+1,hi);
    }
    public static void main(String[] args) {
        int[] arr = {4,9,7,1,2,3,6,5,8};
        int n = arr.length;
        print(arr);
        quickSort(arr , 0,n-1);
        print(arr);
    }
}
